package com.commafeed.backend.dao.newstorage;

import org.junit.Test;

import java.io.Serializable;

public class GenericStorageTest implements Serializable {

    @Test
    public void testGenericStorageSerializationAndStorageFunctions() {

        // Creating a filename that will be used in the test
        String serializationFilename = "TestStorage";

        // Creating the GenericStorage which is under test
        GenericStorage<String, TestObject> storage = new GenericStorage
                (serializationFilename);

        // Creating the key we'll use to store the object
        String key = "Hello";

        // Creating a bogus object to see if it is stored and recovered properly
        TestObject testObj = new TestObject("HelloThisIsATest");


        // Storing the object
        storage.create(key, testObj);

        // Is the object properly stored
        assert(storage.exists(key));
        assert(storage.read(key).equals(testObj));

        // Trying to serialize the object
        storage.saveStorage();

        // Resetting the storage to null
        storage = null;
        storage = new GenericStorage("TestStorage");

        // The object shouldn't exist anymore in the storage
        assert(!storage.exists(key));

        // The storage should be restored with the serialization
        storage.loadStorage();

        // Is the object properly stored
        assert(storage.exists(key));
        assert(storage.read(key).equals(testObj));

    }

    private class TestObject implements Serializable {
        private String test;

        public TestObject(String test) {
            this.test = test;
        }

        public String getTest() {
            return test;
        }

        public void setTest(String test) {
            this.test = test;
        }

        // Autogenerated equals method
        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof TestObject)) {
                return false;
            }

            TestObject that = (TestObject) o;

            return getTest() != null ? getTest().equals(that.getTest()) :
                    that.getTest() == null;

        }
    }
}
